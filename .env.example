# ==============================================================================
# DOGWALKER ENVIRONMENT CONFIGURATION
# ==============================================================================
# Copy this file to `.env` and fill in your actual values.
# Never commit your `.env` file to version control!

# ==============================================================================
# ANTHROPIC API KEY (REQUIRED)
# ==============================================================================
# Purpose: Powers AI code generation through Claude models (primarily Sonnet 4.5)
# Get from: https://console.anthropic.com/settings/keys
# Used by: Worker service (Aider uses this for code generation)
# Cost: $0.10-$10 per task depending on complexity
# Monitor usage at https://console.anthropic.com/settings/usage
ANTHROPIC_API_KEY=sk-ant-...

# ==============================================================================
# SLACK CREDENTIALS (REQUIRED)
# ==============================================================================
# Purpose: Enable Slack bot to receive @mentions and post updates
# Setup:
#   1. Go to https://api.slack.com/apps -> Create New App -> From an app manifest
#   2. Use the manifest from apps/slack-bot/manifest.json.
#   3. Feel free to change the bot name, description, avatar, etc.
#   4. Install the app to your workspace
#   5. Copy tokens from the app settings page
# Used by: Orchestrator service (Slack bot)

# Bot User OAuth Token
# Get from: OAuth & Permissions page after installing app
# Format: xoxb-...
# Note: Scopes are defined in apps/slack-bot/manifest.json
SLACK_BOT_TOKEN=xoxb-...

# App-Level Token (for Socket Mode)
# Get from: Basic Information -> App-Level Tokens
# Format: xapp-...
# Scope needed: connections:write (allows Socket Mode - no public webhooks required)
SLACK_APP_TOKEN=xapp-...

# ==============================================================================
# GITHUB REPOSITORY (REQUIRED)
# ==============================================================================
# Purpose: Target repository where PRs will be created
# Format: owner/repo (e.g., "microsoft/vscode" or "your-username/my-app")
# Used by: Both orchestrator and worker
# Notes:
#   - Repository must exist and be accessible by dog accounts
#   - Dogs need write access to create branches and PRs
#   - Can be private or public repository
GITHUB_REPO=username/reponame

# ==============================================================================
# REDIS CONFIGURATION (REQUIRED)
# ==============================================================================
# Purpose: Message broker for Celery task queue + dog status tracking
# Local development: redis://localhost:6379
# Railway: Automatically provided as $REDIS_URL (don't set manually)
# Docker: redis://redis:6379 (if using docker-compose)
# Used by: Both orchestrator (task creation) and worker (task execution)
# Notes:
#   - Redis must be running before starting orchestrator/worker
#   - Stores task queue, active task tracking, and thread messages
#   - Data is ephemeral (TTLs set for cleanup)
REDIS_URL=redis://localhost:6379

# ==============================================================================
# DOG CONFIGURATION (REQUIRED)
# ==============================================================================
# Purpose: Configure 1-N AI worker "dogs" that execute coding tasks
# Format: JSON array of dog objects
# Used by: Both orchestrator (dog selection) and worker (git identity)
#
# Each dog needs:
#   - name: GitHub username (e.g., "Bryans-Coregi")
#   - email: Git commit email (e.g., "coregi@example.com")
#   - github_token: Fine-grained personal access token (github_pat_...)
#
# GitHub Token Requirements (per dog):
#   - Go to: https://github.com/settings/tokens
#            --> Personal access tokens
#            --> Tokens (classic)
#            --> Generate new token
#            --> --> Generate new token (classic)
#   - Check the "repo" set of scopes
#   - Click "Generate token" and copy the token value
#   - Paste this token into the github_token field for the dog
#
# Load Balancing:
#   - System automatically selects least-busy dog
#   - Redis tracks active tasks per dog
#   - Falls back to round-robin if Redis unavailable
#
# Notes:
#   - Each dog should be a separate GitHub account
#   - Add each dog as collaborator to target repository
#   - Tokens expire; set calendar reminder to rotate
DOGS='[
  {"name": "Bryans-Coregi", "email": "coregi@bryanowens.dev", "github_token": "github_pat_11AAA..."},
  {"name": "Bryans-Bitbull", "email": "bitbull@bryanowens.dev", "github_token": "github_pat_11BBB..."},
  {"name": "Bryans-Poodle", "email": "poodle@bryanowens.dev", "github_token": "github_pat_11CCC..."}
]'

# ==============================================================================
# GITHUB TOKEN FOR ORCHESTRATOR (OPTIONAL)
# ==============================================================================
# Purpose: Separate read-only token for orchestrator operations
# Used by: Orchestrator service (checking branch existence, repo metadata)
# Fallback: If not provided, uses first dog's token
# Why optional: Only needed if you want to separate orchestrator from dog permissions
# Get from: https://github.com/settings/tokens (classic token)
# Notes:
#   - Not required for basic operation
#   - Useful for security isolation (orchestrator can't push code)
# GITHUB_TOKEN=github_pat_...

# ==============================================================================
# GIT CONFIGURATION (OPTIONAL)
# ==============================================================================
# Purpose: Customize which branch PRs target
# Default: main
# Alternative: master, develop, etc.
# Used by: Worker service (when creating PRs)
# Notes:
#   - Branch must exist in repository
#   - All PRs will target this branch
# BASE_BRANCH=main

# ==============================================================================
# DEVELOPMENT / DEBUGGING (OPTIONAL)
# ==============================================================================
# These are not required but can be useful for development:

# Python logging level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Default: INFO
# LOG_LEVEL=INFO

# Celery concurrency (number of parallel tasks per worker)
# Default: CPU count
# Increase for more parallelism (if you have many dogs)
# CELERY_CONCURRENCY=4

# Task timeout (seconds)
# Default: 3600 (1 hour)
# Increase for very complex tasks
# TASK_TIMEOUT=3600

# ==============================================================================
# PRODUCTION DEPLOYMENT NOTES
# ==============================================================================
#
# Railway:
#   - REDIS_URL is automatically provided as ${{REDIS_URL}}
#   - All other variables must be manually set in Railway dashboard
#   - Environment variables are shared across services
#   - Use Railway secrets for sensitive values
#
# Docker:
#   - Use docker-compose.yml to set environment variables
#   - Mount .env file or use env_file directive
#   - Redis service should be named 'redis' for DNS resolution
#
# AWS/GCP/Azure:
#   - Store secrets in SSM Parameter Store / Secret Manager / Key Vault
#   - Use instance metadata or environment variables to inject
#   - Consider managed Redis (ElastiCache, Cloud Memorystore, Azure Cache)
#
# Security:
#   - Never commit .env file to version control
#   - Rotate tokens every 3-6 months
#   - Use least-privilege permissions on GitHub tokens
#   - Monitor API usage for anomalies
#   - Set up alerts for failed authentication
#
# ==============================================================================
